import pandas as pd
import json
from wordcloud import WordCloud
import matplotlib.pyplot as plt

def word_cloud_from_json(word, column, json_df, output_path, number_of_words_in_wordcloud):
#saves a wordcloud as .jpg which is generated by data from json_df (lines = words, columns = years or publishers)

    try:
        frequencies = json_df.loc[word, column]
    except KeyError:
        print('Most-similars for ' + word + ' for ' + str(column) + ' not available.')
        return
        
    if frequencies == None:
        print('Most-similars for ' + word + ' for ' + str(column) + ' not available.')
        
    else:
        wordcloud = WordCloud(max_words=100, max_font_size=60, background_color = 'white').fit_words(dict(frequencies[0: number_of_words_in_wordcloud]))
        fig = plt.figure(1, figsize=(12, 12))
        plt.axis("off")
        plt.imshow(wordcloud)
        num_of_words_in_wordcloud = min(number_of_words_in_wordcloud, len(frequencies))
        output_filename = "wordcloud_" + word + "_" + str(column) + "_" + str(num_of_words_in_wordcloud) + ".jpg"
        wordcloud.to_file(output_path + output_filename)
        print('Wordcloud for ' + word + ' for ' + str(column) + ' saved as ' + output_filename + '.')

def generate_word_clouds(json_file, word_list, columns, output_path, number_of_words_in_wordcloud):
    # generate all word clouds for words in word_list and all years/publishers
    try:
        json_df = pd.read_json(json_file)
    except:
        print("Error during generation of word cloud:")
        print(f"     File {json_file} could not be read.")
        return
    for word in word_list:
    	for column in columns:
            word_cloud_from_json(word, column, json_df, output_path, number_of_words_in_wordcloud)